Python - general info

variable names can not start with a number
no spaces in between name, must use snake_case
cannot use special characters in the name, better to use readable code
global variables may have caps, but generally the variables should be lowercase
avoid built in keywords (i.e. str or list)

dynamic typing
python is dynamic typing (can assign anything to a variable even if its not the same type)

use type() - function to check the type of any variable

static typing
C++ that requires you declare the correct data type (str for string, int for integer)

Strings- ordered sequences 
- can use indexing and slicing to grab sub-sections
- indexing uses [] notation similar to javascript strings (can grab a single character from the string)

zero-indexed                        0 1 2 3 4
python can do reverse indexing      0 -4 -3 -2 -1

my_string = "abcdefghijk"
my_string[2] # c
my_string[2:] # the colon in the suare bracket slices the string
# cdefghijk
my_string[:2]
my_string[::2] # third parameter
my_string[2:7:3] # cf

#string properties and methods
letter = "z"
print(letter * 10) # 'zzzzzzzzzz'

# built-in string methods
# objects in python usually have their own methods
# methods are functions inside the object

x = "Hello World"
print(x.upper()) # does not affect the original string
# x = x.upper()
# print(x)

print(x.split()) # split by the white space into an array

print(x.split('o')) # removes all the Os and splits the string
# strings are not mutable

string interpolation
- format method

# string interpolation
print("This is a string {}".format(345))

print('The {2} {1} {0}'.format('fox', 'brown', 'quick'))

# the indexes of the strings in the format function can be entered into the {} in the string that we want to manipulation

with variable assignment
print('The {q} {b} {f}'.format(f = 'fox', b ='brown', q = 'quick'))

#Lists are ordered sequences that can hold a variety of objects (int, str, bool, etc)
# Lists use [] brackets and commas to separate objects in the list
# support indexing and slicing
# similar to arrays in javascript

my_list =[1 ,2, 3]
print(len(my_list))

my_list = [100, "string", 102.34]
print(len(my_list))
print(type(my_list[0]))
print(my_list[:3])
print(my_list[1:])

another_list = ['four', 'five']
new_list = my_list + another_list
print(new_list)
new_list[0] = "future is here"
print(new_list)

new_list.append("123") # append = push in javascript

print(new_list)
# append effects the list in place

popped_item = new_list.pop() # same in javascript array methods
print(new_list)
print(popped_item)

#sort method sorts the list in place so it returns a noneType

new_list = ['b', 'x', 'p', 'a']
print(type(new_list.sort())) # noneType

print(new_list.sort()) # none
print(new_list)

++++++++++++++++++++++++++++++++++++

Dictionaries - unordered mappings for storing objects {key : value}
- can not sort a dictionary
- objects are retrieved by key name

lists retrieve by location (index)

# dictionaries are similar to objects in javascript

d = {'k1': 100, 'k2': 200, 'k3':300}
print(d.keys()) # dict_keys(['k1', 'k2', 'k3'])
print(d.values()) # dict_values([100, 200, 300])


#tuples - similar to list but are immutable - once an element is inside a tuple, it can not be reassigned - tuples use (1, 2, 3)

t = ('a', 'a', 'b')
print(t.count('a')) # 2 counts of a

print(t.index('a')) # returns the first index location of the a

# tuples are useful later when we are more advanced in python by restricting the changability of a variable - for error handling

#sets - similar to set() in javascript

myset = set()
myset.add(1)
print(myset)
# unique values only

mylist = [1,1,2,2,3,3]
new_set = set(mylist)
print(new_set)


# 100 Days of Python Day 2

can use typecasting to change one datatype to another


